<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaohsiung Linux User Group</title>
    <link>https://kalug.github.io/planet/</link>
    <description>Recent content on Kaohsiung Linux User Group</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://kalug.github.io/planet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 語言基礎實戰教學影片上線了</title>
      <link>https://kalug.github.io/planet/appleboy/20180329_golang-introduction-video/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180329_golang-introduction-video/</guid>
      <description>購買連結 去年在台灣推廣 Drone 這套由 Go 語言所撰寫的開源專案，身為維護者之一，也將 Drone 跟 Gitea 完成整合。如果對於從開發到部署整個流程，還不是很了解的朋友，</description>
    </item>
    
    <item>
      <title>Go 語言搭配 Docker Healthy Check 檢查</title>
      <link>https://kalug.github.io/planet/appleboy/20180319_docker-healthcheck-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180319_docker-healthcheck-in-golang/</guid>
      <description>在 Docker 1.12 版本後，提供了 HEALTHCHECK 指令，通過指定的一行命令來判斷容器內的服務是否正常運作。在此之前大部分都是透過判斷程式是否 Crash 來決定容器是否存活，但是這</description>
    </item>
    
    <item>
      <title>Go 語言的 init 函式</title>
      <link>https://kalug.github.io/planet/appleboy/20180419_init-func-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180419_init-func-in-golang/</guid>
      <description>本篇會帶大家認識 Go 語言的 init 函式，在了解 init func 之前，大家應該都知道在同一個 Package 底下是不可以有重複的變數或者是函式名稱，但是唯獨 init() 可以在同一個 package 內宣</description>
    </item>
    
    <item>
      <title>Go 語言的 vendor 目錄</title>
      <link>https://kalug.github.io/planet/appleboy/20180505_what-is-vendor-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180505_what-is-vendor-in-golang/</guid>
      <description>很多朋友剛入門 Go 語言時，第一個會遇到的問題是，該如何設定專案配置，讓專案可以正常執行，在個人電腦該如何開發多個專案，這邊就會遇到該如何設定 $</description>
    </item>
    
    <item>
      <title>MySQL 中文Big5轉至UTF-8</title>
      <link>https://kalug.github.io/planet/qerter/20060817_mysql-big5utf-8.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20060817_mysql-big5utf-8.html/</guid>
      <description>因為工作需要，必須要將原本MS Access中的資料轉換至MySQL。MS Access 預設編碼為Big5 ，MySQL中以UTF-8存放資料，Collat</description>
    </item>
    
    <item>
      <title>[影片教學] 使用 Filter 將專案跑在特定 Drone Agent 服務</title>
      <link>https://kalug.github.io/planet/appleboy/20180415_how-to-use-filter-in-drone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180415_how-to-use-filter-in-drone/</guid>
      <description>Drone 是一套用 Go 語言撰寫的 CI/CD 開源專案，是由一個 Server 跟多個 Agent 所組成，Agent 上面必須安裝好 Dokcer 才可以順利測試及部署，但是團隊內會出現一個狀況，每個專</description>
    </item>
    
    <item>
      <title>[第參期] 安裝Debian Etch 在 Asus eee box上</title>
      <link>https://kalug.github.io/planet/qerter/20090120_debian-sarge-asus-eee-box.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20090120_debian-sarge-asus-eee-box.html/</guid>
      <description>此篇教學目的為安裝Debian Etch在eee box上，可正常使用X-window與ethernet網路。 首先去下載Debian Etch CD1 iso，</description>
    </item>
    
    <item>
      <title>[第壹期]digg-like 的自由軟體新聞網站 — Free Software Daily</title>
      <link>https://kalug.github.io/planet/qerter/20081101_digg-like-free-software-daily.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20081101_digg-like-free-software-daily.html/</guid>
      <description>Free Software Dailyhttp://www.fsdaily.com 畢竟自由軟體的使用者算小眾，使用Web2.0經營方式的新聞網站，如digg，或台灣的funp，出現的常常是偏大眾口味的文章不然討論跟自</description>
    </item>
    
    <item>
      <title>[第貳期] 自由軟體四大自由</title>
      <link>https://kalug.github.io/planet/qerter/20081102_blog-post.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20081102_blog-post.html/</guid>
      <description>有鑑於我自己常常跟別人推廣自由軟體，但是常常忘記自由軟體基本四大自由，僅列於此。 自由軟體四大自由原文出處網址： http://www.gnu.org/philosophy/free-sw.html 自由軟體四大自由（中文是我自</description>
    </item>
    
    <item>
      <title>使用Mutt收GMail IMAP電子郵件, Part 1 基礎設定篇</title>
      <link>https://kalug.github.io/planet/qerter/20090930_muttgmail-imap.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20090930_muttgmail-imap.html/</guid>
      <description>為響應Richard Stallman 2008年9月在英國衛報反對使用者投入雲端運算的懷抱(Cloud computing is a trap, warns GNU founder Richard Stallman)，我決定改變收電子郵</description>
    </item>
    
    <item>
      <title>使用Mutt收GMail IMAP電子郵件, Part 2 Procmail篇</title>
      <link>https://kalug.github.io/planet/qerter/20091020_muttgmail-imap-part-2-procmail.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20091020_muttgmail-imap-part-2-procmail.html/</guid>
      <description>在Part 1 [使用Mutt收GMail IMAP電子郵件, Part 1 基礎設定篇] 的文章後，我開始接觸使用Mutt這個方便快速的收信軟體來管理我的電子</description>
    </item>
    
    <item>
      <title>使用Mutt收GMail IMAP電子郵件, Part 3 封存郵件篇</title>
      <link>https://kalug.github.io/planet/qerter/20100516_muttgmail-imap-part-3.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20100516_muttgmail-imap-part-3.html/</guid>
      <description>在[使用Mutt收GMail IMAP電子郵件, Part 2 Procmail篇]的文章裡，我們使用procmail來幫我們將郵件做分類。但是，一般性沒</description>
    </item>
    
    <item>
      <title>如何使用 Go 語言 Flag 套件 (影片教學)</title>
      <link>https://kalug.github.io/planet/appleboy/20180412_how-to-use-golang-flag-package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180412_how-to-use-golang-flag-package/</guid>
      <description>之前寫過一篇『用 Golang 寫 Command line 工具』教學，作者我錄了一個教學影片，教大家如何使用 Go 語言的 Flag 套件，套件用法很簡單，相信看了底下的影片教學馬上就會了，</description>
    </item>
    
    <item>
      <title>如何在 Go 專案內寫測試</title>
      <link>https://kalug.github.io/planet/appleboy/20180514_how-to-write-testing-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180514_how-to-write-testing-in-golang/</guid>
      <description>相信大家都知道專案內不導入測試，未來越來越多功能，技術債就會越來越多，接手的人罵聲連連，而寫測試的簡單與否決定專案初期是否要先導入。為什麼專</description>
    </item>
    
    <item>
      <title>將 Go Html Template 存入 String 變數</title>
      <link>https://kalug.github.io/planet/appleboy/20180228_simply-output-go-html-template-execution-to-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180228_simply-output-go-html-template-execution-to-strings/</guid>
      <description>在 Go 語言內通常都將 Html Temaple 寫入到 io.Writer interface 像是 *http.ResponseWriter，但是有些情境需要將 Template 寫入到 String 變數內，例如實作簡訊 Templat</description>
    </item>
    
    <item>
      <title>尋找Linux上自由且合用的台語文輸入法</title>
      <link>https://kalug.github.io/planet/qerter/20090830_linux.html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/qerter/20090830_linux.html/</guid>
      <description>最近開始鼓起勇氣試圖要在Linux上使用臺語文書寫，便開始尋找合適的臺語文書輸入法。而臺語文並沒有統一的書寫方式，我僅粗略分為台羅、漢羅與教</description>
    </item>
    
    <item>
      <title>用 Go 語言實現單一或多重 Queue 搭配 optimistic concurrency</title>
      <link>https://kalug.github.io/planet/appleboy/20180310_simple-queue-with-optimistic-concurrency-in-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180310_simple-queue-with-optimistic-concurrency-in-go/</guid>
      <description>本篇教學會著重在如何使用 Go 語言的 goroutine 及 channel。MongoDB 是一套具有高效能讀寫的 NoSQL 資料庫，但是不像傳統關連式資料庫，有非常好用的 Transaction 交</description>
    </item>
    
    <item>
      <title>用 Nginx 來架設線上即時縮圖機</title>
      <link>https://kalug.github.io/planet/appleboy/20180317_nginx-reverse-proxy-image-resizing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalug.github.io/planet/appleboy/20180317_nginx-reverse-proxy-image-resizing/</guid>
      <description>在更早以前我們怎麼實現縮圖機制，當使用者上傳一張檔案，後端會固定將圖片縮圖成各種前端網頁需要的大小，不管前端頁面是否有使用，後端都會先產生好</description>
    </item>
    
  </channel>
</rss>